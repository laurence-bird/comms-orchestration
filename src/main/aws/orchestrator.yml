---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS resources for Orchestrator

Parameters:
  Version:
    Type: String
  Environment:
    Type: String
    AllowedValues: [ uat, prd ]

Conditions:

  IsPrd: !Equals [ !Ref Environment, prd ]

  IsUat: !Equals [ !Ref Environment, uat ]

Resources:

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: read-credstash
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'kms:Decrypt'
              Resource:
                - !Sub "arn:aws:kms:eu-west-1:${AWS::AccountId}:key/*"
            - Effect: Allow
              Action:
                - 'dynamodb:GetItem'
                - 'dynamodb:Query'
              Resource:
                - !Sub "arn:aws:dynamodb:eu-west-1:${AWS::AccountId}:table/credential-store"
        - PolicyName: read-template-summary-table
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:Query'
                - 'dynamodb:Get*'
              Resource:
                Fn::ImportValue:
                  TemplateSummaryTableArn # <- Exported from Template manager cloudformation.yml
        - PolicyName: read-templates-bucket
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 's3:Get*'
                - 's3:List*'
              Resource:
                - 'arn:aws:s3:::ovo-comms-templates'
                - 'arn:aws:s3:::ovo-comms-templates/*'
        - PolicyName: read-write-scheduling-table
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:Put*'
                - 'dynamodb:Update*'
                - 'dynamodb:Query'
                - 'dynamodb:Scan'
                - 'dynamodb:Get*'
                - 'dynamodb:List*'
                - 'dynamodb:BatchGetItem'
                - 'dynamodb:DescribeTable'
              Resource:
                - Fn::ImportValue:
                    !Sub "${Environment}-SchedulingTable-TableArn"
                - Fn::Sub:
                  - "${TableArn}/*"
                  - TableArn:
                      Fn::ImportValue:
                        !Sub "${Environment}-SchedulingTable-TableArn"
        - PolicyName: read-write-deduplication-table
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:Put*'
                - 'dynamodb:Update*'
                - 'dynamodb:Query'
                - 'dynamodb:Scan'
                - 'dynamodb:Get*'
                - 'dynamodb:List*'
                - 'dynamodb:BatchGetItem'
                - 'dynamodb:DescribeTable'
              Resource:
                - Fn::ImportValue:
                    !Sub "${Environment}-Deduplication-TableArn"
                - Fn::Sub:
                  - "${TableArn}/*"
                  - TableArn:
                      Fn::ImportValue:
                        !Sub "${Environment}-Deduplication-TableArn"

  # It is a little bit sloppy as we should define resources better
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: read-ecr
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              Resource: '*'
      - PolicyName: write-awslog
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource: '*'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 30

  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "orchestrator-${Environment}"
      TaskRoleArn: !Ref TaskRole
      ExecutionRoleArn: !Ref ExecutionRole
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      Cpu: 512
      Memory: 1GB
      ContainerDefinitions:
      - Name: orchestrator
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/orchestrator:${Version}"
        Essential: True
        MemoryReservation: 712
        DockerLabels:
          Service: orchestrator
          Version: !Ref Version
          Environment: !Ref Environment
          Team: Comms
          "com.datadoghq.ad.instances": '[{"host":"%%host%%","port": 9999}]'
          "com.datadoghq.ad.check_names": '["jmx"]'
          "com.datadoghq.ad.init_configs": "[{}]"
        Environment:
        - Name: ENV
          Value: !Ref Environment
        - Name: LOGZIO_TOKEN
          Value:
            'Fn::Transform':
             - Name: 'fetch-secret'
               Parameters:
                 ssm_key: logzio_token
                 env: !Ref Environment
        - Name: TEMPLATE_SUMMARY_TABLE
          Value:
            Fn::ImportValue: "TemplateSummary-TableName"
        - Name: SCHEDULER_TABLE
          Value:
            Fn::ImportValue:
              !Sub "${Environment}-SchedulingTable-TableName"
        - Name: DEDUPLICATION_TABLE
          Value:
            Fn::ImportValue:
              !Sub "${Environment}-Deduplication-TableName"
        - Name: PROFILES_ENDPOINT
          Value:
            Fn::If:
              - IsPrd
              - "https://profiles.ovo-comms.co.uk"
              - "https://profiles.ovo-comms-uat.co.uk"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region: !Sub "${AWS::Region}"
            awslogs-group: !Ref LogGroup
            awslogs-stream-prefix: "orchestrator"
            awslogs-datetime-format: "%Y-%m-%d %H:%M:%S"
      - Name: datadog-agent
        Image: "datadog/agent:6.10.2-jmx"
        Essential: true
        MemoryReservation: 128
        Environment:
          - Name: "DD_API_KEY"
            Value:
              'Fn::Transform':
              - Name: 'fetch-secret'
                Parameters:
                  ssm_key: datadog_api_key
                  env: !Ref Environment
          - Name: "ECS_FARGATE"
            Value: "true"
          - Name: "DD_DOCKER_LABELS_AS_TAGS"
            Value: '{"team":"team","service":"service","environment":"environment"}'
          - Name: "SD_JMX_ENABLE"
            Value: "true"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region: !Sub "${AWS::Region}"
            awslogs-group: !Ref LogGroup
            awslogs-stream-prefix: orchestrator

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue:
          !Sub "${Environment}-Cluster-Arn"
      ServiceName: orchestrator
      TaskDefinition: !Ref Task
      LaunchType: FARGATE
      SchedulingStrategy: REPLICA
      DesiredCount: 5
      DeploymentConfiguration:
        MaximumPercent: 150
        MinimumHealthyPercent: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Fn::ImportValue:
              !Sub "${Environment}-Ecs-SecurityGroup-Id"
          Subnets:
          - Fn::ImportValue:
              !Sub "${Environment}-VPC-PrivateSubnet1-Id"
          - Fn::ImportValue:
              !Sub "${Environment}-VPC-PrivateSubnet2-Id"
          - Fn::ImportValue:
              !Sub "${Environment}-VPC-PrivateSubnet3-Id"
